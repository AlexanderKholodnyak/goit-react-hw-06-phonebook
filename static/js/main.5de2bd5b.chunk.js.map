{"version":3,"sources":["components/Contacts/Contacts.module.css","components/Section/Section.module.css","components/Section/Section.jsx","redux/selectors.js","redux/actions.js","components/Form/Form.jsx","components/Contacts/Contacts.jsx","components/Filter/Filter.jsx","App.js","redux/reducers.js","redux/store.js","reportWebVitals.js","index.js","components/Form/Form.module.css"],"names":["module","exports","Section","title","children","className","s","section","getContacts","state","contacts","items","getFilter","filter","getVisibleContacts","normalizedFilter","toLowerCase","name","includes","addContact","createAction","number","payload","id","shortid","generate","deleteContact","changeFilter","Nameform","useSelector","dispatch","useDispatch","useState","setName","setNumber","handleChange","event","target","value","console","log","onSubmit","e","preventDefault","find","contact","checkName","alert","checkNumber","trim","form","label","type","placeholder","onChange","input","button","Contacts","map","container","onClick","actions","onDeleteContact","Filter","App","initialContactlist","createReducer","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","phonebookPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","reducers","devTools","process","persistor","persistStore","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.5de2bd5b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Contacts_container__1h81k\",\"name\":\"Contacts_name__ZKBOn\",\"button\":\"Contacts_button__3NdnT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__2vjjP\"};","import PropTypes from 'prop-types';\nimport s from './Section.module.css';\nconst Section = ({ title, children }) => (\n  <div className={s.section}>\n    <h2 className={s.title}>{title}</h2>\n    {children}\n  </div>\n);\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node,\n};\n\nexport default Section;\n","export const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.contacts.filter;\n\nexport const getVisibleContacts = state => {\n  const contacts = getContacts(state);\n  const filter = getFilter(state);\n  const normalizedFilter = filter.toLowerCase();\n\n  return contacts.filter(({ name }) =>\n    name.toLowerCase().includes(normalizedFilter),\n  );\n};\n","import { createAction } from '@reduxjs/toolkit';\nimport shortid from 'shortid';\n\nexport const addContact = createAction('phonebook/add', (name, number) => ({\n  payload: {\n    id: shortid.generate(),\n    name,\n    number,\n  },\n}));\n\nexport const deleteContact = createAction('phonebook/delete');\n\nexport const changeFilter = createAction('phonebook/changeFilter');\n","import React, { useState } from 'react';\n//import shortid from 'shortid';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getContacts } from '../../redux/selectors';\nimport { addContact } from '../../redux/actions';\nimport s from './Form.module.css';\n\nexport default function Nameform() {\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n  const onSubmit = (name, number) => dispatch(addContact(name, number));\n  // class Form extends Component {\n  // state = {\n  //   name: '',\n  //   number: ''\n  // };\n  // function Form({ onSubmit }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  function handleChange(event) {\n    const { name, value } = event.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        console.log(value);\n        break;\n      case 'number':\n        setNumber(value);\n        console.log(value);\n        break;\n      default:\n        return;\n    }\n  }\n\n  const checkName = name => {\n    return contacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase(),\n    );\n  };\n\n  const checkNumber = number => {\n    return contacts.find(contact => contact.number === number);\n  };\n\n  function handleSubmit(e) {\n    e.preventDefault();\n\n    if (checkName(name)) {\n      alert(`${name} is already added.`);\n    } else if (checkNumber(number)) {\n      alert(`${number} is already added.`);\n    } else if (name.trim() === '' || number.trim() === '') {\n      alert('All of inputs must be not empty');\n    } else {\n      //  dispatch(addContact(name, number));\n      onSubmit(name, number);\n    }\n\n    // onSubmit(name, number);\n    setName('');\n    setNumber('');\n  }\n\n  return (\n    <form onSubmit={handleSubmit} className={s.form}>\n      <label className={s.label}>\n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          placeholder=\"\"\n          onChange={handleChange}\n          className={s.input}\n        />\n      </label>\n      <label className={s.label}>\n        Number\n        <input\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          placeholder=\"\"\n          onChange={handleChange}\n          className={s.input}\n        />\n      </label>\n\n      {\n        <button type=\"submit\" className={s.button}>\n          Add contact\n        </button>\n      }\n    </form>\n  );\n}\n\n// export default Form;\n","import { useSelector, useDispatch } from 'react-redux';\nimport * as actions from '../../redux/actions';\nimport { getVisibleContacts } from '../../redux/selectors';\nimport s from './Contacts.module.css';\n\nfunction Contacts() {\n  const contacts = useSelector(getVisibleContacts);\n  const dispatch = useDispatch();\n  const onDeleteContact = id => dispatch(actions.deleteContact(id));\n\n  return (\n    <ul>\n      {contacts.map(({ id, name, number }) => (\n        <li key={id} className={s.container}>\n          <p className={s.name}>\n            {name}: {number}{' '}\n          </p>\n\n          <button\n            className={s.button}\n            type=\"button\"\n            onClick={() => onDeleteContact(id)}\n          >\n            Удалить\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nexport default Contacts;\n\n// const Contacts = ({ contacts, onDeleteContact }) => (\n//   <ul>\n//     {contacts.map(({ id, name, number }) => (\n//       <li key={id} className={s.container}>\n//         <p className={s.name}>\n//           {name}: {number}{' '}\n//         </p>\n//         {\n//           <button\n//             className={s.button}\n//             type=\"button\"\n//             onClick={() => onDeleteContact(id)}\n//           >\n//             Удалить\n//           </button>\n//         }\n//       </li>\n//     ))}\n//   </ul>\n// );\n\n// export default Contacts;\n","import React from 'react';\n// import PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getFilter } from '../../redux/selectors';\nimport * as actions from '../../redux/actions';\n\nexport default function Filter() {\n  const value = useSelector(getFilter);\n  const dispatch = useDispatch();\n  const onChange = e => dispatch(actions.changeFilter(e.target.value));\n\n  return (\n    <label>\n      Find contacts by name\n      <input\n        type=\"text\"\n        value={value}\n        onChange={onChange}\n        placeholder=\"Enter name to search\"\n      />\n    </label>\n  );\n}\n","// import { useSelector, useDispatch } from 'react-redux';\n// import { getVisibleContacts } from './redux/selectors';\n// import * as phonebookActions from './redux/actions';\n\n// import React, { Component } from 'react';\n// import { useState, useEffect} from 'react';\n// import shortid from 'shortid';\nimport Section from './components/Section';\nimport Form from './components/Form';\nimport Contacts from './components/Contacts/Contacts.jsx';\nimport Filter from './components/Filter';\n// import listOfContact from './components/Contacts/contacts.json';\n\n// function App() {\n//   const [contacts, setContacts] = useState(listOfContact);\n//   const [filter, setFilter] = useState('');\n//   const firstRender = useRef(true);\n\n// useEffect(() => {\n//   if (firstRender.current) {\n//     const parsedContacts = JSON.parse(localStorage.getItem('contacts'));\n\n//     if (parsedContacts) {\n//       setContacts(parsedContacts);\n//     }\n\n//     firstRender.current = false;\n//     return;\n//   }\n//   localStorage.setItem('contacts', JSON.stringify(contacts));\n// }, [contacts]);\n\n// function addContact(name, number) {\n//   console.log(name, number);\n//   const contact = {\n//     id: shortid.generate(),\n//     name,\n//     number,\n//   };\n//   console.log(contact);\n//   contacts.find(contact => contact.name.toLowerCase() === name.toLowerCase())\n//     ? alert(`${name} is already added.`)\n//     : setContacts(prevContacts => [contact, ...prevContacts]);\n// }\n\n// function getContacts() {\n//   const normalizedFilter = filter.toLowerCase();\n//   return contacts.filter(contact =>\n//     contact.name.toLowerCase().includes(normalizedFilter),\n//   );\n// }\n// function changeFilter(event) {\n//   setFilter(event.currentTarget.value);\n// }\n// function onDeleteContact(contactId) {\n//   setContacts(() => contacts.filter(contact => contact.id !== contactId));\n//   setFilter('');\n// }\nexport default function App() {\n  return (\n    <>\n      <Section title=\"Phonebook\">\n        <Form />\n      </Section>\n      <Section title=\"Contacts\">\n        <Filter />\n        <Contacts />\n      </Section>\n    </>\n  );\n}\n\n// export default App;\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport { addContact, deleteContact, changeFilter } from './actions';\nimport listOfContact from '../components/Contacts/contacts.json';\n\nconst initialContactlist = listOfContact;\n\nconst items = createReducer(initialContactlist, {\n  [addContact]: (state, { payload }) => [...state, payload],\n  [deleteContact]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filter = createReducer('', {\n  [changeFilter]: (state, { payload }) => payload,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n});\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport reducers from './reducers';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nconst phonebookPersistConfig = {\n  key: 'contacts',\n  storage,\n  blacklist: ['filter'],\n};\n\nexport const store = configureStore({\n  reducer: {\n    contacts: persistReducer(phonebookPersistConfig, reducers),\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nexport const persistor = persistStore(store);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { store, persistor } from './redux/store';\nimport reportWebVitals from './reportWebVitals';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Form_form__bbN_y\",\"label\":\"Form_label__1DwT7\",\"input\":\"Form_input__1R-kq\",\"button\":\"Form_button__6MZzq\"};"],"sourceRoot":""}